// Script final para validar permiss√µes e corrigir problemas
// Execute no console do navegador

console.log('üîç === VALIDA√á√ÉO FINAL DE PERMISS√ïES ===')

// Fun√ß√£o para verificar estado atual
function checkCurrentState() {
  console.log('üì¶ === ESTADO ATUAL ===')
  
  const state = {
    token: localStorage.getItem('access_token'),
    user: localStorage.getItem('user_profile'),
    perfil: localStorage.getItem('user_perfil'),
    permissoes: localStorage.getItem('user_permissoes'),
    permissions: localStorage.getItem('user_permissions'),
    role: localStorage.getItem('userRole')
  }
  
  Object.entries(state).forEach(([key, value]) => {
    if (value) {
      try {
        const parsed = JSON.parse(value)
        console.log(`‚úÖ ${key}:`, typeof parsed === 'object' ? `${Object.keys(parsed).length} propriedades` : parsed)
      } catch {
        console.log(`‚úÖ ${key}:`, value)
      }
    } else {
      console.log(`‚ùå ${key}: n√£o encontrado`)
    }
  })
  
  return state
}

// Fun√ß√£o para verificar permiss√µes espec√≠ficas
function checkSpecificPermissions() {
  console.log('üîê === VERIFICA√á√ÉO DE PERMISS√ïES ESPEC√çFICAS ===')
  
  const permissions = JSON.parse(localStorage.getItem('user_permissions') || '[]')
  console.log('üìä Total de permiss√µes:', permissions.length)
  
  const requiredPermissions = [
    'dashboard:visualizar',
    'usuarios:visualizar',
    'gruas:visualizar',
    'estoque:visualizar',
    'relatorios:visualizar',
    'configuracoes:visualizar',
    'ponto_eletronico:visualizar',
    'assinatura_digital:visualizar'
  ]
  
  console.log('üéØ Verificando permiss√µes obrigat√≥rias:')
  const missingPermissions = []
  
  requiredPermissions.forEach(perm => {
    const hasPermission = permissions.includes(perm)
    console.log(`${hasPermission ? '‚úÖ' : '‚ùå'} ${perm}: ${hasPermission}`)
    if (!hasPermission) {
      missingPermissions.push(perm)
    }
  })
  
  if (missingPermissions.length > 0) {
    console.log('‚ùå Permiss√µes faltando:', missingPermissions)
    return false
  } else {
    console.log('‚úÖ Todas as permiss√µes obrigat√≥rias est√£o presentes!')
    return true
  }
}

// Fun√ß√£o para corrigir permiss√µes faltando
function fixMissingPermissions() {
  console.log('üîß === CORRIGINDO PERMISS√ïES FALTANDO ===')
  
  const permissions = JSON.parse(localStorage.getItem('user_permissions') || '[]')
  const requiredPermissions = [
    'dashboard:visualizar',
    'usuarios:visualizar',
    'gruas:visualizar',
    'estoque:visualizar',
    'relatorios:visualizar',
    'configuracoes:visualizar',
    'ponto_eletronico:visualizar',
    'assinatura_digital:visualizar'
  ]
  
  let addedCount = 0
  
  requiredPermissions.forEach(perm => {
    if (!permissions.includes(perm)) {
      console.log(`üîß Adicionando ${perm}...`)
      permissions.push(perm)
      addedCount++
    }
  })
  
  if (addedCount > 0) {
    localStorage.setItem('user_permissions', JSON.stringify(permissions))
    console.log(`‚úÖ ${addedCount} permiss√µes adicionadas!`)
  } else {
    console.log('‚úÖ Todas as permiss√µes j√° estavam presentes!')
  }
  
  return addedCount
}

// Fun√ß√£o para testar verifica√ß√£o de permiss√£o
function testPermissionVerification() {
  console.log('üß™ === TESTANDO VERIFICA√á√ÉO DE PERMISS√ÉO ===')
  
  const permissions = JSON.parse(localStorage.getItem('user_permissions') || '[]')
  const testPermission = 'dashboard:visualizar'
  
  console.log(`üîç Testando verifica√ß√£o de ${testPermission}...`)
  console.log(`üìã Permiss√µes dispon√≠veis: ${permissions.length}`)
  console.log(`üéØ Tem ${testPermission}? ${permissions.includes(testPermission)}`)
  
  if (permissions.includes(testPermission)) {
    console.log('‚úÖ Verifica√ß√£o de permiss√£o funcionando!')
    return true
  } else {
    console.log('‚ùå Verifica√ß√£o de permiss√£o falhou!')
    return false
  }
}

// Fun√ß√£o para recarregar p√°gina
function reloadPage() {
  console.log('üîÑ Recarregando p√°gina...')
  window.location.reload()
}

// Fun√ß√£o principal de valida√ß√£o
function runValidation() {
  console.log('üöÄ === INICIANDO VALIDA√á√ÉO COMPLETA ===')
  
  // 1. Verificar estado atual
  const state = checkCurrentState()
  
  // 2. Verificar permiss√µes espec√≠ficas
  const permissionsOk = checkSpecificPermissions()
  
  // 3. Se n√£o estiver ok, corrigir
  if (!permissionsOk) {
    console.log('üîß Corrigindo permiss√µes...')
    const addedCount = fixMissingPermissions()
    
    if (addedCount > 0) {
      console.log('‚úÖ Permiss√µes corrigidas!')
    }
  }
  
  // 4. Testar verifica√ß√£o
  const verificationOk = testPermissionVerification()
  
  // 5. Resultado final
  console.log('üéØ === RESULTADO FINAL ===')
  console.log(`Estado: ${Object.values(state).every(v => v) ? '‚úÖ' : '‚ùå'}`)
  console.log(`Permiss√µes: ${permissionsOk ? '‚úÖ' : '‚ùå'}`)
  console.log(`Verifica√ß√£o: ${verificationOk ? '‚úÖ' : '‚ùå'}`)
  
  if (permissionsOk && verificationOk) {
    console.log('üéâ Valida√ß√£o bem-sucedida!')
    console.log('‚è≥ Recarregando p√°gina em 3 segundos...')
    setTimeout(reloadPage, 3000)
  } else {
    console.log('‚ùå Valida√ß√£o falhou, verifique os logs acima')
  }
}

// Exportar fun√ß√µes
window.checkCurrentState = checkCurrentState
window.checkSpecificPermissions = checkSpecificPermissions
window.fixMissingPermissions = fixMissingPermissions
window.testPermissionVerification = testPermissionVerification
window.reloadPage = reloadPage
window.runValidation = runValidation

// Executar valida√ß√£o autom√°tica
runValidation()

console.log('üìù Fun√ß√µes dispon√≠veis:')
console.log('- checkCurrentState() - Verificar estado atual')
console.log('- checkSpecificPermissions() - Verificar permiss√µes espec√≠ficas')
console.log('- fixMissingPermissions() - Corrigir permiss√µes faltando')
console.log('- testPermissionVerification() - Testar verifica√ß√£o')
console.log('- reloadPage() - Recarregar p√°gina')
console.log('- runValidation() - Executar valida√ß√£o completa')
